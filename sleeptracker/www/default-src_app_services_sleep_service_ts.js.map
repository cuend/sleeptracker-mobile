{"version":3,"file":"default-src_app_services_sleep_service_ts.js","mappings":"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","sources":["./src/app/data/overnight-sleep-data.ts","./src/app/data/sleep-data.ts","./src/app/data/stanford-sleepiness-data.ts","./src/app/services/sleep.service.ts","./node_modules/shortid/index.js","./node_modules/shortid/lib/alphabet.js","./node_modules/shortid/lib/build.js","./node_modules/shortid/lib/generate.js","./node_modules/shortid/lib/index.js","./node_modules/shortid/lib/is-valid.js","./node_modules/shortid/lib/random/random-byte-browser.js","./node_modules/shortid/lib/random/random-from-seed.js","./node_modules/shortid/lib/util/cluster-worker-id-browser.js","./node_modules/shortid/node_modules/nanoid/format.browser.js"],"sourcesContent":["import { SleepData } from './sleep-data';\n\nexport class OvernightSleepData extends SleepData {\n\tprivate sleepStart:Date;\n\tprivate sleepEnd:Date;\n\n\tconstructor(sleepStart:Date, sleepEnd:Date) {\n\t\tsuper();\n\t\tthis.sleepStart = sleepStart;\n\t\tthis.sleepEnd = sleepEnd;\n\t}\n\n\tsummaryString():string {\n\t\tvar sleepStart_ms = this.sleepStart.getTime();\n\t\tvar sleepEnd_ms = this.sleepEnd.getTime();\n\n\t\t// Calculate the difference in milliseconds\n\t\tvar difference_ms = sleepEnd_ms - sleepStart_ms;\n\t\t    \n\t\t// Convert to hours and minutes\n\t\treturn Math.floor(difference_ms / (1000*60*60)) + \" hours, \" + Math.floor(difference_ms / (1000*60) % 60) + \" minutes.\";\n\t}\n\n\tdateString():string {\n\t\treturn \"Night of \" + this.sleepStart.toLocaleDateString('en-US', { weekday: 'long', month: 'long', day: 'numeric' });\n\t}\n\n\tgetTotalMinutesSlept():number {\n\t\tvar sleepStart_ms = this.sleepStart.getTime();\n\t\tvar sleepEnd_ms = this.sleepEnd.getTime();\n\n\t\t// Calculate the difference in milliseconds\n\t\tvar difference_ms = sleepEnd_ms - sleepStart_ms;\n\n\t\treturn Math.floor(difference_ms / 60000);\n\t}\n\n\tgetTotalHoursSlept():number {\n\t\tvar sleepStart_ms = this.sleepStart.getTime();\n\t\tvar sleepEnd_ms = this.sleepEnd.getTime();\n\n\t\t// Calculate the difference in milliseconds\n\t\tvar difference_ms = sleepEnd_ms - sleepStart_ms;\n\t\treturn Math.floor(difference_ms / (60000*60)) + ((difference_ms / 60000 % 60) * .01);\n\t}\n\n\tgetDateStringForGraph():string {\n\t\tlet d = this.sleepStart.toLocaleDateString('en-US', { weekday: 'long', month: 'long', day: 'numeric' }).split(\" \");\n\n\t\treturn d[1] + \" \" + d[2];\n\t}\n}\n","import { generate } from 'shortid';\n\nexport class SleepData {\n\tid:string;\n\tloggedAt:Date;\n\n\tconstructor() {\n\t\t//Assign a random (unique) ID. This may be useful for comparison (e.g., are two logged entries the same).\n\t\tthis.id = generate();\n\t\tthis.loggedAt = new Date();\n\t}\n\n\tsummaryString():string {\n\t\treturn 'Unknown sleep data';\n\t}\n\n\tdateString():string {\n\t\treturn this.loggedAt.toLocaleDateString('en-US', { weekday: 'long', month: 'long', day: 'numeric' });\n\t}\n}\n","/* from the Stanford Sleepiness Scale */\n/* https://web.stanford.edu/~dement/sss.html */\n\nimport { SleepData } from './sleep-data';\n\nexport class StanfordSleepinessData extends SleepData {\n\tpublic static ScaleValues = [undefined,//Sleepiness scale starts at 1\n\t'Feeling active, vital, alert, or wide awake', //1\n\t'Functioning at high levels, but not at peak; able to concentrate', //2\n\t'Awake, but relaxed; responsive but not fully alert', //3\n\t'Somewhat foggy, let down', //4\n\t'Foggy; losing interest in remaining awake; slowed down', //5\n\t'Sleepy, woozy, fighting sleep; prefer to lie down', //6\n\t'No longer fighting sleep, sleep onset soon; having dream-like thoughts']; //7\n\n\tprivate loggedValue:number;\n\tprivate loggedNote:string;\n\n\tconstructor(loggedValue:number, loggedAt:Date = new Date(), loggedNote:string = \"\") {\n\t\tsuper();\n\t\tthis.loggedValue = loggedValue;\n\t\tthis.loggedAt = loggedAt;\n\t\tthis.loggedNote = loggedNote;\n\t}\n\n\tsummaryString():string {\n\t\treturn this.loggedValue + \": \" + StanfordSleepinessData.ScaleValues[this.loggedValue];\n\t}\n\n\tgetLoggedValue():number {\n\t\treturn this.loggedValue;\n\t}\n\n\tgetLoggedDate() {\n\t\treturn this.loggedAt;\n\t}\n\n\tgetLoggedNote() {\n\t\treturn this.loggedNote;\n\t}\n\n\tgetDateStringForGraph():string {\n\t\tlet d = this.loggedAt.toLocaleDateString('en-US', { weekday: 'long', month: 'long', day: 'numeric' }).split(\" \");\n\n\t\treturn d[1] + \" \" + d[2];\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { SleepData } from '../data/sleep-data';\nimport { OvernightSleepData } from '../data/overnight-sleep-data';\nimport { StanfordSleepinessData } from '../data/stanford-sleepiness-data';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SleepService {\n\tprivate static LoadDefaultData:boolean = true;\n\tpublic static AllSleepData:SleepData[] = [];\n\tpublic static AllOvernightData:OvernightSleepData[] = [];\n\tpublic static AllSleepinessData:StanfordSleepinessData[] = [];\n\n\tconstructor() {\n\t\tif(SleepService.LoadDefaultData) {\n\t\t\tthis.addDefaultData();\n\t\tSleepService.LoadDefaultData = false;\n\t}\n\t}\n\n\tprivate addDefaultData() {\n\t\tthis.logOvernightData(new OvernightSleepData(new Date('February 18, 2021 01:03:00'), new Date('February 18, 2021 09:25:00')));\n\t\tthis.logSleepinessData(new StanfordSleepinessData(4, new Date('February 19, 2021 14:38:00')));\n\t\tthis.logOvernightData(new OvernightSleepData(new Date('February 20, 2021 23:11:00'), new Date('February 21, 2021 08:03:00')));\n\t}\n\n\tpublic logOvernightData(sleepData:OvernightSleepData) {\n\t\tSleepService.AllSleepData.push(sleepData);\n\t\tSleepService.AllOvernightData.push(sleepData);\n\t}\n\n\tpublic logSleepinessData(sleepData:StanfordSleepinessData) {\n\t\tSleepService.AllSleepData.push(sleepData);\n\t\tSleepService.AllSleepinessData.push(sleepData);\n\t}\n\n\tpublic getLastSleepData(sleepData:OvernightSleepData) {\n\t\treturn SleepService.AllSleepData[SleepService.AllSleepData.length - 1];\n\t}\n\n\tpublic getLastSleepinessLog(sleepData:OvernightSleepData) {\n\t\treturn SleepService.AllSleepinessData[SleepService.AllSleepinessData.length - 1];\n\t}\n\n\tpublic getLastOvernightLog(sleepData:OvernightSleepData) {\n\t\treturn SleepService.AllOvernightData[SleepService.AllOvernightData.length - 1];\n\t}\n\n\tpublic getLastFiveOvernightLogs() {\n\t\tlet lastFiveLogs = [];\n\t\t\n\t\tlet x = 0;\n\t\tfor (let i=SleepService.AllOvernightData.length - 1; i >= 0 && x < 5;i--) {\n\t\t\tlastFiveLogs.push(SleepService.AllOvernightData[i]);\n\t\t\tx++;\n\t\t}\n\n\t\treturn lastFiveLogs.reverse();\n\t}\n\n\tpublic getLastFiveSleepinessLogs() {\n\t\tlet lastFiveLogs = [];\n\t\t\n\t\tlet x = 0;\n\t\tfor (let i=SleepService.AllSleepinessData.length - 1; i >= 0 && x < 5;i--) {\n\t\t\tlastFiveLogs.push(SleepService.AllSleepinessData[i]);\n\t\t\tx++;\n\t\t}\n\n\t\treturn lastFiveLogs.reverse();\n\t}\n}\n","'use strict';\nmodule.exports = require('./lib/index');\n","'use strict';\n\nvar randomFromSeed = require('./random/random-from-seed');\n\nvar ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';\nvar alphabet;\nvar previousSeed;\n\nvar shuffled;\n\nfunction reset() {\n    shuffled = false;\n}\n\nfunction setCharacters(_alphabet_) {\n    if (!_alphabet_) {\n        if (alphabet !== ORIGINAL) {\n            alphabet = ORIGINAL;\n            reset();\n        }\n        return;\n    }\n\n    if (_alphabet_ === alphabet) {\n        return;\n    }\n\n    if (_alphabet_.length !== ORIGINAL.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);\n    }\n\n    var unique = _alphabet_.split('').filter(function(item, ind, arr){\n       return ind !== arr.lastIndexOf(item);\n    });\n\n    if (unique.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));\n    }\n\n    alphabet = _alphabet_;\n    reset();\n}\n\nfunction characters(_alphabet_) {\n    setCharacters(_alphabet_);\n    return alphabet;\n}\n\nfunction setSeed(seed) {\n    randomFromSeed.seed(seed);\n    if (previousSeed !== seed) {\n        reset();\n        previousSeed = seed;\n    }\n}\n\nfunction shuffle() {\n    if (!alphabet) {\n        setCharacters(ORIGINAL);\n    }\n\n    var sourceArray = alphabet.split('');\n    var targetArray = [];\n    var r = randomFromSeed.nextValue();\n    var characterIndex;\n\n    while (sourceArray.length > 0) {\n        r = randomFromSeed.nextValue();\n        characterIndex = Math.floor(r * sourceArray.length);\n        targetArray.push(sourceArray.splice(characterIndex, 1)[0]);\n    }\n    return targetArray.join('');\n}\n\nfunction getShuffled() {\n    if (shuffled) {\n        return shuffled;\n    }\n    shuffled = shuffle();\n    return shuffled;\n}\n\n/**\n * lookup shuffled letter\n * @param index\n * @returns {string}\n */\nfunction lookup(index) {\n    var alphabetShuffled = getShuffled();\n    return alphabetShuffled[index];\n}\n\nfunction get () {\n  return alphabet || ORIGINAL;\n}\n\nmodule.exports = {\n    get: get,\n    characters: characters,\n    seed: setSeed,\n    lookup: lookup,\n    shuffled: getShuffled\n};\n","'use strict';\n\nvar generate = require('./generate');\nvar alphabet = require('./alphabet');\n\n// Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n// This number should be updated every year or so to keep the generated id short.\n// To regenerate `new Date() - 0` and bump the version. Always bump the version!\nvar REDUCE_TIME = 1567752802062;\n\n// don't change unless we change the algos or REDUCE_TIME\n// must be an integer and less than 16\nvar version = 7;\n\n// Counter is used when shortid is called multiple times in one second.\nvar counter;\n\n// Remember the last time shortid was called in case counter is needed.\nvar previousSeconds;\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction build(clusterWorkerId) {\n    var str = '';\n\n    var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);\n\n    if (seconds === previousSeconds) {\n        counter++;\n    } else {\n        counter = 0;\n        previousSeconds = seconds;\n    }\n\n    str = str + generate(version);\n    str = str + generate(clusterWorkerId);\n    if (counter > 0) {\n        str = str + generate(counter);\n    }\n    str = str + generate(seconds);\n    return str;\n}\n\nmodule.exports = build;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar random = require('./random/random-byte');\nvar format = require('nanoid/format');\n\nfunction generate(number) {\n    var loopCounter = 0;\n    var done;\n\n    var str = '';\n\n    while (!done) {\n        str = str + format(random, alphabet.get(), 1);\n        done = number < (Math.pow(16, loopCounter + 1 ) );\n        loopCounter++;\n    }\n    return str;\n}\n\nmodule.exports = generate;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar build = require('./build');\nvar isValid = require('./is-valid');\n\n// if you are using cluster or multiple servers use this to make each instance\n// has a unique value for worker\n// Note: I don't know if this is automatically set when using third\n// party cluster solutions such as pm2.\nvar clusterWorkerId = require('./util/cluster-worker-id') || 0;\n\n/**\n * Set the seed.\n * Highly recommended if you don't want people to try to figure out your id schema.\n * exposed as shortid.seed(int)\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\n */\nfunction seed(seedValue) {\n    alphabet.seed(seedValue);\n    return module.exports;\n}\n\n/**\n * Set the cluster worker or machine id\n * exposed as shortid.worker(int)\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\n * returns shortid module so it can be chained.\n */\nfunction worker(workerId) {\n    clusterWorkerId = workerId;\n    return module.exports;\n}\n\n/**\n *\n * sets new characters to use in the alphabet\n * returns the shuffled alphabet\n */\nfunction characters(newCharacters) {\n    if (newCharacters !== undefined) {\n        alphabet.characters(newCharacters);\n    }\n\n    return alphabet.shuffled();\n}\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction generate() {\n  return build(clusterWorkerId);\n}\n\n// Export all other functions as properties of the generate function\nmodule.exports = generate;\nmodule.exports.generate = generate;\nmodule.exports.seed = seed;\nmodule.exports.worker = worker;\nmodule.exports.characters = characters;\nmodule.exports.isValid = isValid;\n","'use strict';\nvar alphabet = require('./alphabet');\n\nfunction isShortId(id) {\n    if (!id || typeof id !== 'string' || id.length < 6 ) {\n        return false;\n    }\n\n    var nonAlphabetic = new RegExp('[^' +\n      alphabet.get().replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&') +\n    ']');\n    return !nonAlphabetic.test(id);\n}\n\nmodule.exports = isShortId;\n","'use strict';\n\nvar crypto = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto\n\nvar randomByte;\n\nif (!crypto || !crypto.getRandomValues) {\n    randomByte = function(size) {\n        var bytes = [];\n        for (var i = 0; i < size; i++) {\n            bytes.push(Math.floor(Math.random() * 256));\n        }\n        return bytes;\n    };\n} else {\n    randomByte = function(size) {\n        return crypto.getRandomValues(new Uint8Array(size));\n    };\n}\n\nmodule.exports = randomByte;\n","'use strict';\n\n// Found this seed-based random generator somewhere\n// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)\n\nvar seed = 1;\n\n/**\n * return a random number based on a seed\n * @param seed\n * @returns {number}\n */\nfunction getNextValue() {\n    seed = (seed * 9301 + 49297) % 233280;\n    return seed/(233280.0);\n}\n\nfunction setSeed(_seed_) {\n    seed = _seed_;\n}\n\nmodule.exports = {\n    nextValue: getNextValue,\n    seed: setSeed\n};\n","'use strict';\n\nmodule.exports = 0;\n","// This file replaces `format.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nmodule.exports = function (random, alphabet, size) {\n  // We can’t use bytes bigger than the alphabet. To make bytes values closer\n  // to the alphabet, we apply bitmask on them. We look for the closest\n  // `2 ** x - 1` number, which will be bigger than alphabet size. If we have\n  // 30 symbols in the alphabet, we will take 31 (00011111).\n  // We do not use faster Math.clz32, because it is not available in browsers.\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1\n  // Bitmask is not a perfect solution (in our example it will pass 31 bytes,\n  // which is bigger than the alphabet). As a result, we will need more bytes,\n  // than ID size, because we will refuse bytes bigger than the alphabet.\n\n  // Every hardware random generator call is costly,\n  // because we need to wait for entropy collection. This is why often it will\n  // be faster to ask for few extra bytes in advance, to avoid additional calls.\n\n  // Here we calculate how many random bytes should we call in advance.\n  // It depends on ID length, mask / alphabet size and magic number 1.6\n  // (which was selected according benchmarks).\n\n  // -~f => Math.ceil(f) if n is float number\n  // -~i => i + 1 if n is integer number\n  var step = -~(1.6 * mask * size / alphabet.length)\n  var id = ''\n\n  while (true) {\n    var bytes = random(step)\n    // Compact alternative for `for (var i = 0; i < step; i++)`\n    var i = step\n    while (i--) {\n      // If random byte is bigger than alphabet even after bitmask,\n      // we refuse it by `|| ''`.\n      id += alphabet[bytes[i] & mask] || ''\n      // More compact than `id.length + 1 === size`\n      if (id.length === +size) return id\n    }\n  }\n}\n"],"names":["SleepData","OvernightSleepData","constructor","sleepStart","sleepEnd","summaryString","sleepStart_ms","getTime","sleepEnd_ms","difference_ms","Math","floor","dateString","toLocaleDateString","weekday","month","day","getTotalMinutesSlept","getTotalHoursSlept","getDateStringForGraph","d","split","generate","id","loggedAt","Date","StanfordSleepinessData","loggedValue","loggedNote","undefined","ScaleValues","getLoggedValue","getLoggedDate","getLoggedNote","Injectable","SleepService","LoadDefaultData","addDefaultData","logOvernightData","logSleepinessData","sleepData","AllSleepData","push","AllOvernightData","AllSleepinessData","getLastSleepData","length","getLastSleepinessLog","getLastOvernightLog","getLastFiveOvernightLogs","lastFiveLogs","x","i","reverse","getLastFiveSleepinessLogs","providedIn","module","exports","require","randomFromSeed","ORIGINAL","alphabet","previousSeed","shuffled","reset","setCharacters","_alphabet_","Error","unique","filter","item","ind","arr","lastIndexOf","join","characters","setSeed","seed","shuffle","sourceArray","targetArray","r","nextValue","characterIndex","splice","getShuffled","lookup","index","alphabetShuffled","get","REDUCE_TIME","version","counter","previousSeconds","build","clusterWorkerId","str","seconds","now","random","format","number","loopCounter","done","pow","isValid","seedValue","worker","workerId","newCharacters","isShortId","nonAlphabetic","RegExp","replace","test","crypto","window","msCrypto","randomByte","getRandomValues","size","bytes","Uint8Array","getNextValue","_seed_","mask","log","LN2","step"],"sourceRoot":"webpack:///","x_google_ignoreList":[4,5,6,7,8,9,10,11,12,13]}